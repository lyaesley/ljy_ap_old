<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model 어노테이션 사용 선언 -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/css/**" location="/resources/css/" />
	<mvc:resources mapping="/js/**" location="/resources/js/" />
	<mvc:resources mapping="/img/**" location="/resources/img/" />
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"></beans:property>
	</beans:bean>

	<beans:bean id="tilesViewResolver"	class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>

	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/resources/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>


	<!-- 스프링에 빈으로 등록할 클래스를 찾아서 빈으로 등록해주는 설정. @를 사용한 클래스를 빈으로 등록하고 해당 빈에서 필요로 
		하는 의존성을 주입해준다. -->
	<context:component-scan base-package="com.lyae">
		<!-- component-scan의 프로퍼티중에 use-default-filters의 기본값은 true 이다. 이 부분을 false로 
			하고 설정을 하면 다른 필터는 로딩되지 않고 순수하게 설정된 부분만 필터링이된다. -->
		<!-- <context:component-scan base-package="com.lyae" use-default-filters="false"> -->
		<!-- <context:include-filter expression="org.springframework.stereotype.Controller" 
			type="annotation"/> -->
	</context:component-scan>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/" />
			<beans:bean id="loggerInterceptor" class="com.lyae.logger.LoggerInterceptor"></beans:bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- task 사용 선언. xml 설정에  bean task , xsi 추가 -->
	<!-- <task:annotation-driven/> -->
	<!-- 쓰레드 풀 설정시 아래와 같이.. 설정 안할경우 default = pool-size="1" -->
	<!-- <task:executor id="myExecutor" pool-size="5"/> -->
	<!-- <task:scheduler id="jobScheduler" pool-size="10" /> -->
	<!-- <task:annotation-driven executor="myExecutor" scheduler="jobScheduler" /> -->
	

</beans:beans>
